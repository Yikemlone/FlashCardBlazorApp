@page "/flashcards"
@attribute [Authorize(Policy= "IsCustomer")]
@inject HttpClient Http
@inject AuthenticationStateProvider AuthProvider

<PageTitle>Flash Cards</PageTitle>

@if (vocabs != null & _userOptions != null) 
{
    <MudStack Class="pa-3 mt-12 pb-16" AlignItems="AlignItems.Center">
        <MudText Typo="Typo.h6">@(_index+1)/@vocabs.Count</MudText>

        <CascadingValue Value="vocabs[_index]">
            <FlashCard ChangeIndex="ChangeIndex" UserFlashCardOptions="@_userOptions"/>
        </CascadingValue>
        
    </MudStack>
} 
else 
{
    <MudStack AlignItems="AlignItems.Center" Class="mt-16">
        <MudProgressLinear Indeterminate=true/>
    </MudStack>
}
 

@code {
    private const string API_URL = "api/customer";
    private int _index = 0;

    protected List<Vocab> vocabs;
    protected UserFlashCardOptions _userOptions;

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthProvider.GetAuthenticationStateAsync()).User.Identity;

        if (user != null & user.IsAuthenticated)
        {
            _userOptions = await Http.GetFromJsonAsync<UserFlashCardOptions>(API_URL + "/get-options");
            vocabs = await Http.GetFromJsonAsync<List<Vocab>>(API_URL + $"/get-vocabs/{_userOptions.WordsPerSession}");
        }
    }

    protected async Task ChangeIndex(int number)
    {
        _index += number;

        if (_index < 0)
        {
            _index = vocabs.Count - 1;
        }
        else if (_index > (vocabs.Count - 1)) 
        {
            _index = 0;
        }

        this.StateHasChanged();
    }
}
