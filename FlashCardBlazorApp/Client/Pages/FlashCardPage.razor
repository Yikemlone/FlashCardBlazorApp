@page "/flashcards"
@attribute [Authorize(Policy= "IsCustomer")]
@inject HttpClient Http
@inject AuthenticationStateProvider AuthProvider

<PageTitle>Flash Cards</PageTitle>

@if (vocabs.Count > 0) 
{
    <MudContainer>
        <div class="relative">

            <div class="absolute">
                <FlashCard Vocab="@vocabs[_index]"/>
            </div>

            <div class="absolute">
                <MudFab StartIcon="@Icons.Material.Filled.ArrowLeft" Color="Color.Secondary"></MudFab>
                <MudFab StartIcon="@Icons.Material.Filled.ArrowRight" Color="Color.Secondary"></MudFab>
            </div>

        </div>
    </MudContainer>
} 
else 
{
    <MudProgressLinear Indeterminate=true></MudProgressLinear>
}
 

@code {
    private const string API_URL = "api/customer";
    private int _index = 0;

    private List<Vocab> vocabs = new();
    private UserFlashCardOptions _userOptions = new();

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthProvider.GetAuthenticationStateAsync()).User.Identity;

        if (user != null & user.IsAuthenticated)
        {
            _userOptions = await Http.GetFromJsonAsync<UserFlashCardOptions>(API_URL + "/get-options");
            vocabs = await Http.GetFromJsonAsync<List<Vocab>>(API_URL + $"/get-vocabs/{_userOptions.WordsPerSession}");
        }
    }
}
