@page "/flashcards"
@attribute [Authorize(Policy= "IsCustomer")]
@inject HttpClient Http
@inject IdentityAuthenticationStateProvider AuthProvider

<PageTitle>Flash Cards</PageTitle>

@if (_vocabs != null & _userOptions != null & _vocabProgresses != null)
{
    <MudStack Class="pa-3 mt-12 pb-16" AlignItems="AlignItems.Center">
        <MudText Typo="Typo.h6">@(_index+1)/@_vocabs.Count</MudText>

        <CascadingValue Value="_vocabs[_index]">
            <FlashCard ChangeIndex="ChangeIndex" UserFlashCardOptions="@_userOptions" UpdateRating="UpdateRating"/>
        </CascadingValue>
        
    </MudStack>
} 
else 
{
    <MudStack AlignItems="AlignItems.Center" Class="mt-16">
        <MudProgressLinear Indeterminate=true/>
    </MudStack>
}
 

@code {
    private const string API_URL = "api/customer";
    private int _index = 0;

    private List<Vocab> _vocabs;
    private UserFlashCardOptions _userOptions;
    private List<VocabProgress> _vocabProgresses;


    protected override async Task OnInitializedAsync()
    {
        _vocabProgresses = new();

        var user = (await AuthProvider.GetAuthenticationStateAsync()).User.Identity;

        if (user != null & user.IsAuthenticated)
        {
            _userOptions = await Http.GetFromJsonAsync<UserFlashCardOptions>(API_URL + "/get-options");
            _vocabs = await Http.GetFromJsonAsync<List<Vocab>>(API_URL + $"/get-vocabs/{_userOptions.WordsPerSession}");
        }
    }

    protected async Task ChangeIndex(int number)
    {
        _index += number;

        if (_index < 0)
        {
            _index = _vocabs.Count - 1;
        }
        else if (_index > (_vocabs.Count - 1)) 
        {
            _index = 0;
        }
    }

    protected async Task UpdateRating(int rating) 
    {
        var userID = (await AuthProvider.GetUserInfo()).UserId;
        var index = _vocabProgresses.FindIndex(e => e.VocabID == _vocabs[_index].ID);

        if (index != -1)
        {
            _vocabProgresses[index].ProgressRating = rating;
        }
        else 
        {
            _vocabProgresses.Add(new VocabProgress
            {
                ApplicationUserId = new Guid(userID),
                ProgressRating = rating,
                VocabID = _vocabs[_index].ID,
            });
        }
    }
}
