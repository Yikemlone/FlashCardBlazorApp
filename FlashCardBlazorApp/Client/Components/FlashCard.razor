@inherits ComponentBase

<style>
    .card-container {
        width: 310px;
        height: 500px;
    }

    .card {
        width: 100%;
        height: 100%;

        position: relative;

        background-color: #0b423f;

        transition: transform 1500ms;
        transform-style: preserve-3d;
    }

    .card-content {
        width: 100%;
        height: 100%;
        border-radius: 24px;

        position: absolute;
        overflow: hidden;

        display: flex;
        justify-content: center;
        align-items: center;
    }

    .card-back {
        transform: rotateY(180deg);
    }

    .flipped {
        transform: rotateY(180deg);
    }

    .fab-buttons{
        width: 100%;
        height: 0%;
        
        justify-content: space-between;
        display: flex;
        align-items: center;
    }

</style>



<div class="card-container">
    <div class="card  @(flipped ? "flipped" :"")">

        <div class="card-content @(flipped ? "card-back" :"")">
            @Vocab.JLPT
            @Vocab.VocabPos

            @if (!flipped)
            {
                @Vocab.VocabKana
                @Vocab.SentenceKana
            }
            else
            {
                @Vocab.VocabMeaning
                @Vocab.VocabExpression
            }
            <MudButton OnClick="Flip">Flip</MudButton>
        </div>

    </div>

    <div class="fab-buttons">
        <MudFab OnClick="LeftClick" StartIcon="@Icons.Material.Filled.ArrowLeft" Color="Color.Secondary"></MudFab>
        <MudFab OnClick="RightClick" StartIcon="@Icons.Material.Filled.ArrowRight" Color="Color.Secondary"></MudFab>
    </div>
</div>



@code {
    private bool flipped;
    private async Task Flip() => flipped = !flipped;

    [Parameter] public Vocab Vocab { get; set; }

    private async void RightClick() 
    {
        Console.WriteLine("Right");
    }

    private async void LeftClick() 
    { 
        Console.WriteLine("Left");
    }
}

