@inherits ComponentBase

<style>
    .card-container {
        width: 400px;
        height: 500px;

        cursor: pointer;
    }

    .card {
        width: 100%;
        height: 100%;

        position: relative;

        background-color: #0b423f;

        transition: transform 1000ms;
    }

    .card-content {
        width: 100%;
        height: 100%;
        border-radius: 24px;

        position: absolute;
        overflow: hidden;

        transition: transform 500ms;
    }

    .card-back {
        transform: rotateY(180deg);
    }

    .flipped {
        transform: rotateY(180deg);
    }

    .fab-buttons{
        height: 100%;
        display:flex;
        margin: auto;
    }

    .buttons {
        width: 100%;
    }

</style>

<MudStack Row=true>

    <MudIconButton Class="fab-buttons" OnClick="LeftClick" Icon="@Icons.Material.Filled.ArrowLeft" Color="Color.Primary"/>

    <div class="card-container">
        <div @onclick="Flip" class="card  @(flipped ? "flipped" :"")">

            <div class="card-content @(flipped ? "card-back" :"")">

                <MudStack Class="pa-4">
                    <MudText Typo="Typo.body1">JLPT Rating: <b>@Vocab.JLPT</b></MudText>
                    <MudText Typo="Typo.body1">Vocab Type: <b>@Vocab.VocabPos</b></MudText>

                        @if (!flipped)
                        {
                            <MudText Typo="Typo.body1">Expression: <b>@Vocab.VocabExpression</b></MudText>
                            <MudText Typo="Typo.body1">Sentence Expression: @(new MarkupString(@Vocab.SentenceExpression))</MudText>

                            <MudText Typo="Typo.body1">Sentence Kana: @(new MarkupString(@Vocab.SentenceKana))</MudText>
                            <MudText Typo="Typo.body1">Vocab Furigana: @(new MarkupString(@Vocab.VocabFurigana))</MudText>
                            <MudText Typo="Typo.body1">Sentence Furigana: @(new MarkupString(@Vocab.SentenceFurigana))</MudText>
                        }
                        else
                        {
                            <MudText Typo="Typo.body1">Meaning: @Vocab.VocabMeaning</MudText>
                            <MudText Typo="Typo.body1">Sentence Meaning:@Vocab.SentenceMeaning</MudText>
                        }
                </MudStack>
            </div>

        </div>    

        <MudStack Row="true" Spacing="2" Justify="Justify.SpaceEvenly" Class="mt-3">
            <MudButton OnClick="Bad" Class="buttons" Color="Color.Error" Variant="Variant.Outlined">HARD</MudButton>
            <MudButton OnClick="Ok" Class="buttons" Color="Color.Surface" Variant="Variant.Outlined">OK</MudButton>
            <MudButton OnClick="Good" Class="buttons" Color="Color.Success" Variant="Variant.Outlined">EASY</MudButton>
        </MudStack>

    </div>

    <MudIconButton Class="fab-buttons" OnClick="RightClick" Icon="@Icons.Material.Filled.ArrowRight" Color="Color.Primary"/>

</MudStack>


@code {
    private bool flipped;
    private async Task Flip() => flipped = !flipped;

    [CascadingParameter] public Vocab Vocab { get; set; }
    [Parameter] public EventCallback<int> ChangeIndex { get; set; }
    [Parameter] public EventCallback<int> UpdateRating { get; set; }
    [Parameter] public UserFlashCardOptions UserFlashCardOptions { get; set; }

    private async void RightClick() 
    {
        if (flipped)
        {
            Flip();
        }

        await ChangeIndex.InvokeAsync(1);
    }

    private async void LeftClick()
    {
        if (flipped)
        {
            Flip();
        }

        await ChangeIndex.InvokeAsync(-1);
    }

    private async void Bad()
    {
        RightClick();
        await UpdateRating.InvokeAsync(0);
    }

    private async void Ok()
    {
        RightClick();
        await UpdateRating.InvokeAsync(1);
    }

    private async void Good() 
    {
        RightClick();
        await UpdateRating.InvokeAsync(2);
    }
}
