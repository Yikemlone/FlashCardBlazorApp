@inherits ComponentBase

<style>
    .card-container {
        width: 380px;
        height: 650px;
    }

    .card {
        width: 100%;
        height: 100%;

        position: relative;

        background-color: #0b423f;

        transition: transform 1500ms;
        transform-style: preserve-3d;
    }

    .card-content {
        width: 100%;
        height: 100%;
        border-radius: 24px;

        position: absolute;
        overflow: hidden;
    }

    .card-back {
        transform: rotateY(180deg);
    }

    .flipped {
        transform: rotateY(180deg);
    }

    .fab-buttons{
        width: 100%;
        height: 0%;
        
        justify-content: space-between;
        display: flex;
        align-items: center;
    }

</style>

<div class="card-container">
    <div class="card  @(flipped ? "flipped" :"")">

        <div class="card-content @(flipped ? "card-back" :"")">

            <MudStack Class="pa-4">
                <MudText Typo="Typo.body1">JLPT Rating: <b>@Vocab.JLPT</b></MudText>
                <MudText Typo="Typo.body1">Vocab Type: <b>@Vocab.VocabPos</b></MudText>

                @if (!flipped)
                {
                    <MudText Typo="Typo.body1">Expression: <b>@Vocab.VocabExpression</b></MudText>
                    <MudText Typo="Typo.body1">Sentence Expression: @(new MarkupString(@Vocab.SentenceExpression))</MudText>
                    <MudText Typo="Typo.body1">Sentence Kana: @(new MarkupString(@Vocab.SentenceKana))</MudText>
                    <MudText Typo="Typo.body1">Vocab Furigana: @(new MarkupString(@Vocab.VocabFurigana))</MudText>
                    <MudText Typo="Typo.body1">Sentence Furigana: @(new MarkupString(@Vocab.SentenceFurigana))</MudText>
                }
                else
                {
                    <MudText Typo="Typo.body1">Meaning: @Vocab.VocabMeaning</MudText>
                    <MudText Typo="Typo.body1">Sentence Meaning:@Vocab.SentenceMeaning</MudText>
                }

                <MudButton Color="Color.Secondary" Variant="Variant.Outlined" OnClick="Flip">Flip</MudButton>

            </MudStack>
            
        </div>

    </div>

    <div class="fab-buttons">
        <MudFab OnClick="LeftClick" StartIcon="@Icons.Material.Filled.ArrowLeft" Color="Color.Secondary"></MudFab>
        <MudFab OnClick="RightClick" StartIcon="@Icons.Material.Filled.ArrowRight" Color="Color.Secondary"></MudFab>
    </div>
</div>



@code {
    private bool flipped;
    private async Task Flip() => flipped = !flipped;

    [Parameter] public EventCallback<int> ChangeIndex { get; set; }

    [Parameter] public Vocab Vocab { get; set; }
    [Parameter] public UserFlashCardOptions UserFlashCardOptions { get; set; }

    private async void RightClick() 
    {
        await ChangeIndex.InvokeAsync(1);
    }

    private async Task LeftClick()
    { 
        await ChangeIndex.InvokeAsync(-1);
    }
}

