@using System.Security.Claims
@inherits ComponentBase
@inject IdentityAuthenticationStateProvider authStateProvider


<EditForm Model="@_model" OnValidSubmit="OnSubmit">

    <DataAnnotationsValidator />

    <MudTextField Label="Username" Variant="Variant.Filled" @bind-Value="_model.UserName" Required RequiredError="You must enter a username" For="@(() => _model.UserName)" />
    <MudTextField InputType="InputType.Password" Variant="Variant.Filled" Label="Password" Class="mt-3" @bind-Value="_model.Password" 
        Required RequiredError="You must enter a password" For="@(() => _model.Password)" />
    <MudTextField InputType="InputType.Password" Variant="Variant.Filled" Label="Confirm Password" Class="mt-3" @bind-Value="_model.PasswordConfirm" 
        Required RequiredError="Confirm your password" For="@(() => _model.PasswordConfirm)" />

    <MudStack Row="true" Spacing="6" Justify="Justify.Center">
        <MudText Typo="Typo.subtitle1" style="color: red">@_error</MudText>
        <MudButton Variant="Variant.Filled" OnClick="OnSubmit" Color="Color.Secondary">Register</MudButton>
    </MudStack>

</EditForm>

@code {
    private RegisterParameters _model = new();
    private string _error;

    async Task OnSubmit()
    {
        _error = null;

        try
        {
            if (_model.UserName == null || _model.Password == null || _model.PasswordConfirm == null)
            {
                _error = "You can't have empty fields";
                return;
            }

            await authStateProvider.Register(_model);
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
    }
}
