@inherits ComponentBase
@inject IdentityAuthenticationStateProvider authStateProvider
@inject HttpClient Http

<MudPaper Elevation="1" Class="ma-12 pa-6">
    <EditForm Model="@_model" OnValidSubmit="OnSubmit">

        <DataAnnotationsValidator />

        <MudTextField Label="Username" Variant="Variant.Filled" @bind-Value="_model.UserName" Required RequiredError="You must enter a username" For="@(() => _model.UserName)" />
        <MudTextField InputType="InputType.Password" Variant="Variant.Filled" Label="Password" Class="mt-3" @bind-Value="_model.Password" 
            Required RequiredError="You must enter a password" For="@(() => _model.Password)" />
        <MudTextField InputType="InputType.Password" Variant="Variant.Filled" Label="Confirm Password" Class="mt-3" @bind-Value="_model.PasswordConfirm" 
            Required RequiredError="Confirm your password" For="@(() => _model.PasswordConfirm)" />

        <MudStack Row="true" Spacing="6" Justify="Justify.Center">
            <MudText Typo="Typo.subtitle1" style="color: red">@_error</MudText>
        </MudStack>

    </EditForm>

    <MudForm>

        <MudTextField T="int" Label="Words Per Session" Variant="Variant.Filled" Required RequiredError="You must enter a word qty." @bind-Value=_userOptions.WordsPerSession></MudTextField>

        <MudStack Row=true>
            <MudSelect Label="JLPT Filter" @bind-Value="_userOptions.JLPT" Variant="Variant.Filled" Required RequiredError="You must select a JLPT Rating.">
                <MudSelectItem Value="@("All")">All</MudSelectItem>
                <MudSelectItem Value="@("JLPT1")">JLPT1</MudSelectItem>
                <MudSelectItem Value="@("JLPT2")">JLPT2</MudSelectItem>
                <MudSelectItem Value="@("JLPT3")">JLPT3</MudSelectItem>
                <MudSelectItem Value="@("JLPT4")">JLPT4</MudSelectItem>
                <MudSelectItem Value="@("JLPT5")">JLPT5</MudSelectItem>
            </MudSelect>

            <MudSelect Label="Vocab Type" @bind-Value="_userOptions.VocabPosFilter" Variant="Variant.Filled" Required RequiredError="You must select an Vocab Type.">
                <MudSelectItem Value="@("All")">All</MudSelectItem>
                <MudSelectItem Value="@("Verb")">Verb</MudSelectItem>
                <MudSelectItem Value="@("Noun")">Noun</MudSelectItem>
                <MudSelectItem Value="@("Adjective")">Adjective</MudSelectItem>
                <MudSelectItem Value="@("Adverb")">Adverb</MudSelectItem>
            </MudSelect>
        </MudStack>

        <MudStack Row="true">
            <MudCheckBox @bind-Checked=_userOptions.Kanji>Kanji</MudCheckBox>
            <MudCheckBox @bind-Checked=_userOptions.Furigana>Furigana</MudCheckBox>
            <MudCheckBox @bind-Checked=_userOptions.Kana>Kana</MudCheckBox>
        </MudStack>

        <MudButton OnClick="OnSubmit" Variant="Variant.Outlined" Color="Color.Secondary" Class="ml-6 mt-12 mb-12 pa-3">Confirm</MudButton>

    </MudForm>
</MudPaper>

@code {
    private UserFlashCardOptions _userOptions = new();

    private RegisterParameters _model = new();
    private LoginParameters _login = new();
    private string _error;

    async Task OnSubmit()
    {
        _error = null;

        try
        {
            if (_model.UserName == null || _model.Password == null || _model.PasswordConfirm == null)
            {
                _error = "You can't have empty fields";
                return;
            }

            await authStateProvider.Register(_model);

            _login.UserName = _model.UserName;
            _login.Password = _model.Password;

            await authStateProvider.Login(_login);
            await Http.PostAsJsonAsync<UserFlashCardOptions>("api/customer/set-options", _userOptions);
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
    }
}
